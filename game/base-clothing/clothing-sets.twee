:: Widgets Outfits [widget]
<<widget "listoutfits">>
	<label class="no-numberify"><<link "현재 복장으로 새 세트를 만든다">><<toggleclass "#newClothingSetFromCurrent" "hidden">><</link>></label> |
	<label class="no-numberify"><<link "모든 세트를 편집한다">><<overlayReplace "outfitEditor">><</link>></label>
	<br>
	<div id="newClothingSetFromCurrent" class="wardrobeSubSection hidden">
		<<wardrobeNewOutfit>>
		<br>
	</div>
	<br>

	<label><<radiobutton "$delete_outfit" "none" checked>> 입기</label> |
	<label><<radiobutton "$delete_outfit" 1>> 제거</label> |
	<label><<radiobutton "$delete_outfit" 2>> 현재 옷으로 덮어쓰기</label>
	<br><br>

	<!-- List the currently saved outfits -->
	<div class="outfitContainer no-numberify">
		<<for _index, $_outfit range $outfit>>
			<<if $_outfit.location and $_outfit.location isnot $wardrobe_location>>
				<<continue>>
			<</if>>
			<<set _outfitname to $_outfit.name + ($_outfit.colors is false ? "" : " [C]") + ($_outfit.location is undefined ? "" : " [L]")>>
			<<capture _index>>
				<<button _outfitname>><<set $wear_outfit to _index>><<updatewardrobe "outfits">><</button>>
			<</capture>>
		<</for>>
	</div>
<</widget>>

<<widget "listoutfitsPassage">>
	<<set $wardrobe_location to _args[0]>>
	<<set _store_location to _args[1] || _args[0]>>
	<<set $_indent to _args[2] || false>>
	<<wardrobeSelection true>>
	<<for _index, _outfit range $outfit>>
		<<if (_outfit.location and _outfit.location isnot $wardrobe_location) or _outfit.type.includes("swim") or _outfit.type.includes("sleep")>>
			<<continue>>
		<</if>>
		<<capture _index _outfit>>
			<<if $_indent>><<ind>><</if>>
			<<if _outfit.name is currentOutfit()>>
				<span class="grey"><<print _outfit.name>> (착용중)</span>
			<<else>>
				<<link [[_outfit.name+" 입기"|$passage]]>>
					<<if clothingInStorage(_store_location).length is 0>>
						<<storesave _store_location>>
					<</if>>
					<<set $wearoutfittext to _outfit.name + " 복장">>
					<<set $eventskip to 1>>
					<<set $wear_outfit to _index>>
					<<set $storeLocation to _args[0]>>
				<</link>>
			<</if>>
			<br>
		<</capture>>
	<</for>>
<</widget>>

<<widget "listsleepoutfits">>
	<<switch _args[0]>>
		<<case "Farm Bed">>
			<<set _passage to "Farm Bed">>
			<<set $wardrobe_location to "alexFarm">>
			<<set $storeLocation to "Farm Bed">>
		<<case "prison bed">>
			<<set _passage to "Prison Bed">>
			<<set $wardrobe_location to "prison">>
			<<set $storeLocation to "prison bed">>
		<<case "Robin Bed">>
			<<set _passage to "Robin Room Bed">>
			<<set $wardrobe_location to "wardrobe">>
			<<set $storeLocation to "bed">>
		<<case "Temple Bunk Bed">>
			<<set _passage to "Temple Bunk Bed">>
			<<set $wardrobe_location to "temple">>
			<<set $storeLocation to "Temple Bunk Bed">>
		<<case "Pirate Bed Lie">>
			<<set _passage to "Pirate Bed Lie">>
			<<set $wardrobe_location to "pirate">>
			<<set $storeLocation to "Pirate Bed Lie">>
		<<default>>
			<<set _passage to "Bed">>
			<<set $wardrobe_location to "wardrobe">>
			<<set $storeLocation to "bed">>
	<</switch>>
	<<wardrobeSelection true>>
	<<if $earSlime.alwaysSleepNaked is false>>
		<<for _index, $_outfit range $outfit>>
			<<if $_outfit.type.includes("sleep")>>
				<<if _passage is "Bed">>
					<<furnitureicon _bed.iconFile>>
				<<elseif _passage is "Prison Bed">>
					<<prisonicon "bed">>
				<<elseif _passage is "Asylum Bed">>
					<<bedicon "hospital">>
				<<elseif $location is "alex_cottage">>
				<<set _farmbed to ($loveInterest.primary is "Alex" or $loveInterest.secondary is "Alex") ? "alex" : "farm">>
				<<bedicon _farmbed>>
				<<else>>
					<<bedicon>>
				<</if>>
				<<capture _index>>
					<<set _outfitname to $_outfit.name + ($_outfit.colors is false ? "" : " [C]")>>
					<<link [[_outfitname+" 입고 침대에 들어간다"|_passage]]>><<set $wear_outfit to _index>><<saveTempHairStyle>><</link>>
				<</capture>>
				<br>
			<</if>>
		<</for>>
	<<elseif $outfit.find(outfitSet => outfitSet.type.includes("sleep"))>>
		<<icon "cross.png" "infront">>
		<<if _passage is "Bed">>
			<<furnitureicon _bed.iconFile>>
		<<elseif _passage is "Prison Bed">>
			<<prisonicon "bed">>
		<<elseif _passage is "Asylum Bed">>
			<<bedicon "hospital">>
		<<else>>
			<<bedicon>>
		<</if>>
		<<if $possessed>>
			<span class="purple">머릿속의 슬라임은 조용하다.</span>
			<br>
		<<else>>
			<span class="purple">슬라임이 당신이 옷을 입고 자는 것을 허락하지 않는다.</span>
			<br>
		<</if>>
	<</if>>
<</widget>>

<<widget "listswimoutfits">>
	<<set $wardrobe_location to _args[0]>>
	<<set _store_location to _args[1] || _args[0]>>
	<<set $_indent to _args[2] || false>>
	<<wardrobeSelection true>>
	<<for _index, _outfit range $outfit>>
		<<if (_outfit.location and _outfit.location isnot $wardrobe_location) or !_outfit.type.includes("swim")>>
			<<continue>>
		<</if>>
		<<capture _index _outfit>>
			<<if $_indent>><<ind>><</if>>
			<<if _outfit.name is currentOutfit()>>
				<span class="grey"><<print _outfit.name>> (착용중)</span>
			<<else>>
				<<link [[_outfit.name+" 입기"|$passage]]>>
					<<storesave _store_location>>
					<<set $wearoutfittext to _outfit.name>>
					<<set $eventskip to 1>>
					<<set $wear_outfit to _index>>
					<<set $storeLocation to _args[0]>>
				<</link>>
			<</if>>
			<br>
		<</capture>>
	<</for>>
<</widget>>

<<widget "listdancingclothes">>
	<<set _store_location to _args[0]>>
	<<set _slot to "under_upper">>
	<<for _index, _outfit range $wardrobe[_slot].sort((a, b) => (a.name > b.name) ? 1 : -1)>>
		<<if !_outfit.type.includes("dance")>>
			<<continue>>
		<</if>>
		<<capture _outfit>>
			<<if !$wardrobe.under_lower.find(item => item.variable is _outfit.variable)>>
				<span class="grey"><<print _outfit.name>> (Broken)</span>
				<br>
			<<elseif _outfit.name isnot _prevName>>
				<<set _prevName to _outfit.name>>
				<<if _outfit.name is $worn.under_upper.name>>
					<span class="grey"><<print _outfit.name>> (착용중)</span>
				<<else>>
					<<link [[_outfit.name+" 입기"|$passage]]>>
						<<if clothingInStorage(_store_location).length is 0>>
							<<storesave _store_location>>
							<<set $wearoutfittext to _outfit.name>>
						<</if>>
						<<set $eventskip to 1>>
						<<set _item_index to $wardrobe[_slot].indexOf(_outfit)>>
						<<generalWearFromWardrobe _slot _item_index>>
					<</link>>
				<</if>>
				<br>
			<</if>>
		<</capture>>
	<</for>>
<</widget>>

<<widget "radiooutfits">>
	<<for _index, $_outfit range $outfit>>
		<<if $_outfit.location and $_outfit.location isnot $wardrobe_location>>
			<<continue>>
		<</if>>
		<<capture _index>>
			<label>$_outfit.name 입기 <<radiobutton "$wear_outfit" _index>></label> |
		<</capture>>
	<</for>>
	<label>입었던 것으로 입기 <<radiobutton "$wear_outfit" "clotheson" checked>></label>
<</widget>>

<<widget "deleteoutfit">>
	<<if $delete_outfit is 1 and $wear_outfit isnot "none">>
		<<set $outfit.deleteAt($wear_outfit)>>
		<<set $wear_outfit to "none">>
	<</if>>
<</widget>>

<<widget "saveTempHairStyle">>
	<<set $tempSavedHairStyles to {hairtype:$hairtype, fringetype:$fringetype, hairposition:$hairposition}>>
<</widget>>

<<widget "loadTempHairStyle">>
	<<if $tempSavedHairStyles>>
		<<set $hairtype to $tempSavedHairStyles['hairtype']>>
		<<set $fringetype to $tempSavedHairStyles['fringetype']>>
		<<set $hairposition to $tempSavedHairStyles['hairposition']>>
		<<unset $tempSavedHairStyles>>
	<</if>>
<</widget>>

<<widget "wearoutfit">>
	<<set _selectedWardrobe to selectWardrobe()>>
	<<updateWornClothingLocation $wardrobe_location>>
	<<deleteoutfit>>
	<<overwriteoutfit>>
	<<set $delete_outfit to "none">>

	<<if $wear_outfit is "clotheson">>
		<<storeon $storeLocation>>
	<<elseif $wear_outfit isnot "none">>
		<<set _equip to setup.clothingLayer.all>>
		<<set _equipSkip to {"over_upper":false, "over_lower":false, "upper":false, "lower":false, "under_upper":false, "under_lower":false, "over_head":false, "head":false, "face":false, "neck":false, "hands":false, "handheld":false, "legs":false, "feet":false}>>
		<<set _storeItemSkip to {"over_upper":false, "over_lower":false, "upper":false, "lower":false, "under_upper":false, "under_lower":false, "over_head":false, "head":false, "face":false, "neck":false, "hands":false, "handheld":false, "legs":false, "feet":false}>>
		<<set _equipDamageValue to {"over_upper":3, "over_lower":3, "upper":3, "lower":3, "under_upper":3, "under_lower":3, "over_head":1, "head":1, "face":1, "neck":1, "hands":1, "handheld":1, "legs":1, "feet":1}>>
		<<set _corruptionEquipSkip to ["over_upper","over_lower","upper", "lower", "under_upper", "under_lower"]>>
		<<set _towels to ["towel top","large towel","towel skirt"]>>
		<<set _notEquipped to {}>>

		<<for $_slot range _equip>>
			/*Skip slots that have been equipped with*/
			<<if _equipSkip[$_slot] is true>>
				<<continue>>
			<</if>>

			<<set $_incomingItemName to $outfit[$wear_outfit][$_slot]>>
			/*Skip slots that have not been defined*/
			<<if $_incomingItemName is undefined>>
				<<continue>>
			<</if>>

			/*Check for items that are cursed*/
			<<unset _preventItemEquip>>
			<<if $worn[$_slot].cursed is 1>>
				<<set _preventItemEquip to true>>
			<<elseif $worn[$_slot].outfitPrimary isnot undefined>>
				<<set _preventItemEquip to Object.entries($worn[$_slot].outfitPrimary).some(([slot, name]) => {
					if (!["broken", "split"].includes(name) and $worn[slot].cursed is 1) _preventItemEquip = true;
				})>>
			<</if>>

			<<set $_storeLocation to ($storeLocation ? $storeLocation : $wardrobe_location)>>

			<<if _preventItemEquip is true>>
				<<if $_incomingItemName is "naked">>
					/*Can't unequip cursed item */
					<<trClothes $_slot setup.clothes[$_slot][clothesIndex($_slot,$worn[$_slot])].name "name">><<set _notEquipped[$_slot] to {"name": _trResult, "reason": "cursed unequip"}>>
				<<else>>
					/*Can't swap cursed item for anything else */
					<<trClothes $_slot $_incomingItemName "name">><<set _notEquipped[$_slot] to {"name": _trResult, "reason": "cursed slot"}>>
				<</if>>
			<<else>>
				<<if $_incomingItemName is "naked">>
					<<generalUndress $_storeLocation $_slot>>
				<<elseif _towels.includes($_incomingItemName)>>
					<<generalUndress $_storeLocation $_slot>>
					<<if $worn[$_slot].name is "naked">>
						<<switch $_incomingItemName>>
							<<case "towel top">>
								<<set $worn.upper to clone(setup.clothes.upper[3])>>
							<<case "large towel">>
								<<generalUndress $_storeLocation "lower">>
								<<if $worn.lower.name is "naked">>
									<<set $worn.upper to clone(setup.clothes.upper[14])>>
									<<set $worn.lower to clone(setup.clothes.lower[15])>>
									<<set _equipSkip.lower to true>>
								<</if>>
							<<case "towel skirt">>
								<<set $worn.lower to clone(setup.clothes.lower[3])>>
						<</switch>>
					<</if>>
				<<else>>
					<<set _foundEquip to null>><<set _lastResort to null>>
					<<unset _randomColour>>
					<<unset _randomColourAcc>>
					<<for $_equipIndex, $_wardrobeItem range _selectedWardrobe[$_slot]>>
						<<if $_incomingItemName isnot $_wardrobeItem.name or ($_wardrobeItem.outfitSecondary and !["broken", "split"].includes($_wardrobeItem.outfitSecondary[1]))>>
							<<continue>>
						<</if>>
						/* Check for saved colors in clothing set */
						<<set $_outfitColors to $outfit[$wear_outfit].colors>>
						<<if $_outfitColors>>
							/* Start of checking for random colours */
							<<set _randomColourListItem to $_wardrobeItem.name>>
							<<if $_outfitColors[$_slot][0] is "random" or $_outfitColors[$_slot][1] is "random">>
								<<set $_randomColourItems to _selectedWardrobe[$_slot].filter(item => item.name === T.randomColourListItem)>>

								/* Ensures that non-random colours are accounted for*/
								<<if $_outfitColors[$_slot][0] and $_outfitColors[$_slot][0] isnot "random">>
									<<set _tempColour to $_outfitColors[$_slot][0]>>
									<<set $_randomColourItems to $_randomColourItems.filter(item => item.colour === T.tempColour)>>
									<<unset _tempColour>>
								<</if>>
								<<if $_outfitColors[$_slot][1] and $_outfitColors[$_slot][1] isnot "random">>
									<<set _tempColour to $_outfitColors[$_slot][1]>>
									<<set $_randomColourItems to $_randomColourItems.filter(item => item.accessory_colour === T.tempColour)>>
									<<unset _tempColour>>
								<</if>>
							<</if>>

							/* Picks the random colours*/
							<<if $_outfitColors[$_slot][0] is "random" and !_randomColour>>
								<<set _randomColourList to []>>
								<<if $_randomColourItems and $_randomColourItems.length>>
									<<run $_randomColourItems.forEach(item => T.randomColourList.pushUnique(item.colour))>>
								<</if>>
								<<if _randomColourList.length>>
									<<set _randomColour to _randomColourList[random(0, _randomColourList.length - 1)]>>
									<<set $_randomColourItems to $_randomColourItems.filter(item => item.colour === T.randomColour)>>
								<</if>>
							<</if>>
							<<if $_outfitColors[$_slot][1] is "random" and !_randomColourAcc>>
								<<set _randomColourAccList to []>>
								<<if $_randomColourItems and $_randomColourItems.length>>
									<<run $_randomColourItems.forEach(item => T.randomColourAccList.pushUnique(item.accessory_colour))>>
								<</if>>
								<<if _randomColourAccList.length>>
									<<set _randomColourAcc to _randomColourAccList[random(0, _randomColourAccList.length - 1)]>>
								<</if>>
							<</if>>
							<<unset _randomColourListItem>>

							/* Skips over items that do not match the random colours */
							<<if (!_randomColour or _randomColour isnot $_wardrobeItem.colour) and $_outfitColors[$_slot][0] isnot $_wardrobeItem.colour>>
								<<continue>>
							<</if>>
							<<if (!_randomColourAcc or _randomColourAcc isnot $_wardrobeItem.accessory_colour) and $_outfitColors[$_slot][1] isnot $_wardrobeItem.accessory_colour>>
								<<continue>>
							<</if>>
							/* End of checking for random colours */

							<<set $_outfitCustomColors to $_outfitColors[$_slot+"custom"] || [undefined, undefined]>>
							<<if $_wardrobeItem.colour is "custom" and $_wardrobeItem.colourCustom isnot undefined and $_wardrobeItem.colourCustom isnot $_outfitCustomColors[0]>>
								/* this item is not a match, move on to the next item */
								<<continue>>
							<</if>>
							<<if $_wardrobeItem.accessory_colour is "custom" and $_wardrobeItem.accessory_colourCustom isnot undefined and $_wardrobeItem.accessory_colourCustom isnot $_outfitCustomColors[1]>>
								<<continue>>
							<</if>>
						<</if>>
						/*Check for preggy restriction*/
						<<if playerBellySize() gte 12 and $_wardrobeItem.type.includes("constricting")>>
							<<if $_wardrobeItem.type.includes("chest_bind")>>
								<<trClothes $_slot $_incomingItemName "name">><<set _notEquipped[$_slot] to {"name": _trResult, "reason": "constrictingChest"}>>
							<<else>>
								<<trClothes $_slot $_incomingItemName "name">><<set _notEquipped[$_slot] to {"name": _trResult, "reason": "constricting"}>>
							<</if>>
							<<break>>
						<</if>>
						/*Check for slime corruption*/
						<<if _corruptionEquipSkip.includes($_slot) and $earSlime.corruption gte 10>>
							<<if $earSlime.forcedCommando isnot undefined and ($_slot is "under_lower" or ($_wardrobeItem.outfitPrimary and $_wardrobeItem.outfitPrimary.under_lower and !["broken","split"].includes($_wardrobeItem.outfitPrimary.under_lower)))>>
								<<if $_wardrobeItem.type.includes("naked") or (_earSlimeEnableSwimwear and $_wardrobeItem.type.includes("swim")) or (_earSlimeEnableDancewear and $_wardrobeItem.type.includes("dance"))>>
								<<elseif $earSlime.forcedCommando gt 0>>
									<<trClothes $_slot $_incomingItemName "name">><<set _notEquipped[$_slot] to {"name": _trResult, "reason": "corruption_slime_deny_commando"}>>
									<<break>>
								<<else>>
									<<run delete $earSlime.forcedCommando>>
								<</if>>
							<<elseif $_wardrobeItem.reveal lt earSlimeCorruptionClothes() and !(!["prison", "asylum"].includes($location) and $_wardrobeItem.type.includesAny("school") and Time.schoolDay) and !$_wardrobeItem.type.includesAny("event")>>
								<<trClothes $_slot $_incomingItemName "name">><<set _notEquipped[$_slot] to {"name": _trResult, "reason": "corruption_slime_deny"}>>
								<<break>>
							<<elseif $earSlime.forcedDressing and $_wardrobeItem.gender isnot $earSlime.forcedDressing.type and $_wardrobeItem.gender isnot "n" and !$_wardrobeItem.type.includesAny("event")>>
								<<if $earSlime.forcedDressing.days gt 0>>
									<<trClothes $_slot $_incomingItemName "name">><<set _notEquipped[$_slot] to {"name": _trResult, "reason": "corruption_slime_deny_forcedDressing"}>>
									<<break>>
								<<else>>
									<<run delete $earSlime.forcedDressing>>
								<</if>>
							<</if>>
						<</if>>

						/*Finds the least damaged outfit if the current clothing item is the main part and sets it as a last resort incase an undamaged one isnt found*/
						<<set _damage to 0>>
						<<if $_wardrobeItem.outfitPrimary isnot undefined>>
							<<set _outfitPrimaryWearOutfit to $_wardrobeItem.outfitPrimary>>
							/*Check for damaged parts*/
							<<for $_outfitSlot, $_outfitPieceName range _outfitPrimaryWearOutfit>>
								<<if $_outfitPieceName is "broken" or $_outfitPieceName is "split">>
									<<set _damage += _equipDamageValue[$_outfitSlot]>>
								<</if>>
							<</for>>
							<<if _damage gt 0>>
								<<if _lastResort is null or _damage lt _lastResort.damage>>
									<<set _lastResort to {
										damage: clone(_damage),
										id: clone($_equipIndex)
									}>>
								<</if>>
								<<continue>>
							<</if>>
						<</if>>
						<<if _damage is 0>>
							<<set _foundEquip to {}>>
							<<set _foundEquip[$_slot] to clone($_equipIndex)>>
							<<break>>
						<</if>>
					<</for>>

					/*If the main outfit has not been found, use the last resort*/
					<<if _foundEquip is null and _lastResort isnot null>>
						<<if !($worn[$_slot].name is $_incomingItemName and $worn[$_slot].one_piece is 1)>>
							<<set _foundEquip to {}>>
							<<set _foundEquip[$_slot] to _lastResort.id>>
						<</if>>
					<</if>>

					/*Ensure at this point, the main piece of clothing has been found*/
					<<if _foundEquip isnot null>>
						/*Undress equip*/
						<<generalUndress $_storeLocation $_slot>>

						/*Find all the outfit pieces now the main least damaged piece has been found if the clothing is part of an outfit*/
						<<set $_foundPrimary to _selectedWardrobe[$_slot][_foundEquip[$_slot]]>>
						<<if $_foundPrimary and $_foundPrimary.outfitPrimary isnot undefined>>

							/*Check these values once, outside of the loop, so we don't continuously check them on every loop iteration*/
							<<set $_primaryColourIsCustom to ($_foundPrimary.colour is "custom")>>
							<<set $_primaryAccColourIsCustom to ($_foundPrimary.accessory_colour is "custom")>>

							<<for $_outfitSlot, $_outfitPieceName range $_foundPrimary.outfitPrimary>>
								<<if $worn[$_outfitSlot].cursed is 1>>
									<<set _preventItemEquip to true>>
									<<break>>
								<</if>>
								<<if $_outfitPieceName is "broken" or $_outfitPieceName is "split">>
									<<continue>>
								<</if>>
								<<if !_storeItemSkip[$_outfitSlot]>>
									<<generalUndress $_storeLocation $_outfitSlot>>
								<</if>>
								<<set $_itemFound to false>>
								<<for _index, $_possiblePiece range _selectedWardrobe[$_outfitSlot]>>
									<<if $_outfitPieceName isnot $_possiblePiece.name>>
										<<continue>>
									<</if>>
									/*Skip broken and split pieces*/
									<<if $_possiblePiece.outfitSecondary[1] is "broken" or $_possiblePiece.outfitSecondary[1] is "split">>
										<<continue>>
									<</if>>
									/*Skip items that don't have matching colours*/
									<<if $_foundPrimary.colour isnot $_possiblePiece.colour or ($_possiblePiece.accessory isnot 0 and $_foundPrimary.accessory_colour isnot $_possiblePiece.accessory_colour)>>
										<<continue>>
									<</if>>
									/*Skip items that don't have matching custom colours*/
									<<if $_primaryColourIsCustom and ($_foundPrimary.colourCustom is undefined or $_foundPrimary.colourCustom isnot $_possiblePiece.colourCustom)>>
										<<continue>>
									<</if>>
									<<if $_primaryAccColourIsCustom and ($_foundPrimary.accessory isnot 0 and $_foundPrimary.accessory_colourCustom is undefined or $_foundPrimary.accessory_colourCustom isnot $_possiblePiece.accessory_colourCustom)>>
										<<continue>>
									<</if>>
									/*Found the correct item*/
									<<set _foundEquip[clone($_outfitSlot)] to clone(_index)>>
									<<set _equipSkip[$_outfitSlot] to true>>
									<<set $_itemFound to true>>
								<</for>>
								<<if $_itemFound is false>>
									/*None were found, error in code/save?*/
									<<trClothes $_outfitSlot $_incomingItemName "name">><<set _notEquipped[$_outfitSlot] to {"name": _trResult, "reason": "not found piece"}>>
								<</if>>
							<</for>>
						<</if>>
						/*Equip all the clothing items*/
						<<if !_preventItemEquip>>
							<<for $_outfitslot, _index range _foundEquip>>
								<<set $worn[$_outfitslot] to clone(_selectedWardrobe[$_outfitslot][_index])>>
								<<set $worn[$_outfitslot].lastTaken to $wardrobe_location>>
								<<set _selectedWardrobe[$_outfitslot].deleteAt(_index)>>
								<<run resetClothingState($_outfitslot)>>
							<</for>>

							/*If the worn item was a hoodie, make sure the hood is in the correct position*/
							<<if $_slot is "upper" and $worn.upper.hoodposition and $worn.upper.outfitPrimary.head isnot "broken" and $worn.upper.outfitPrimary.head isnot "split">>
								<<if $worn.upper.hoodposition isnot outfitHoodPosition($outfit[$wear_outfit])>>
									<<toggleHood>>
									<<set _equipSkip["head"] to ($worn.upper.hoodposition is "up" ? true : false)>>
								<</if>>
							<</if>>
						<<else>>
							<<trClothes $_slot $_incomingItemName "name">><<set _notEquipped[$_slot] to {"name": _trResult, "reason": "cursed slot"}>>
						<</if>>
					<<else>>
						<<if $worn[$_slot].name is $_incomingItemName>>
							<<if !_notEquipped[$_slot]>>
								<<trClothes $_slot $_incomingItemName "name">><<set _notEquipped[$_slot] to {"name": _trResult, "reason": "not found replacement"}>>
							<</if>>
							/*If the worn item was a hoodie, make sure the hood is in the correct position*/
							<<if $_slot is "upper" and $worn.upper.hoodposition and $worn.upper.outfitPrimary.head isnot "broken" and $worn.upper.outfitPrimary.head isnot "split" and $worn.upper.hoodposition isnot outfitHoodPosition($outfit[$wear_outfit])>>
								<<toggleHood>>
							<</if>>
							<<if $wardrobe_location isnot "wardrobe">>
								<<set _makeTempClothing to 1>>
								<<storeItem $wardrobe_location $_slot>>
							<</if>>
						<<else>>
							<<if !_notEquipped[$_slot]>>
								<<trClothes $_slot $_incomingItemName "name">><<set _notEquipped[$_slot] to {"name": _trResult, "reason": "not found"}>>
							<</if>>
							<<if $wardrobe_location isnot "wardrobe" and $worn[$_slot].name isnot "naked">>
								<<set _makeTempClothing to 1>>
								<<storeItem $wardrobe_location $_slot>>
							<</if>>
						<</if>>
					<</if>>
				<</if>>
			<</if>>
		<</for>>
		<<if $outfit[$wear_outfit].hairStyle>>
			/*Update Hairstyle*/
			<<set $_outfitHair to $savedHairStyles[$outfit[$wear_outfit].hairStyle]>>
			<<set $hairtype to $_outfitHair.hairtype>>
			<<set $fringetype to $_outfitHair.fringetype>>
			<<set $hairposition to $_outfitHair.hairposition>>
		<</if>>
	<</if>>

	<<if $worn.under_lower.type.includes("naked")>>
		<<set $worn.under_lower.exposedType to "notWorn">>
	<</if>>

	<<if $wear_outfit isnot "none" and _notEquipped>>
		<<if Object.values(_notEquipped).length gt 0>>
			<<set _resultStrings to {}>>
			<<set _locationName to ($wardrobes[$wardrobe_location] is undefined ? "wardrobe" : $wardrobe_location)>>
			<<set _wardrobeName to $wardrobes[_locationName].name + (!$wardrobes[_locationName].name.includes("locker") ? " wardrobe" : "")>>
			<<run Object.entries(_notEquipped).forEach(([slot, notEquippedItem]) => {
				switch (notEquippedItem.reason) {
					case "not found":
						if (_resultStrings.notFound === undefined) {
							_resultStrings.notFound = {
								"start": "당신은 ",
								"joiner": "또는",
								"end": " " + _trResult + "에서 찾을 수 없었다.",
								"names": [],
								"color": "purple"
							}
						}
						_resultStrings.notFound.names.push(notEquippedItem.name);
						break;
					case "not found replacement":
						if (_resultStrings.notFoundReplacement === undefined) {
							_resultStrings.notFoundReplacement = {
								"start": "당신은 현재 착용하고 있는 것을 대체할 ",
								"joiner": "또는",
								"end": " " + _trResult + "에서 찾을 수 없었다.",
								"names": [],
								"color": "lewd"
							}
						}
						_resultStrings.notFoundReplacement.names.push(notEquippedItem.name);
						break;
					case "constricting":
						if (_resultStrings.constricting === undefined) {
							_resultStrings.constricting = {
								"start": "당신의 <<bellyDescription_ i 'pc'>> 너무 커서 ",
								"joiner": "그리고",
								"end": "착용할 수 없었다.",
								"names": [],
								"color": "red"
							}
						}
						_resultStrings.constricting.names.push(notEquippedItem.name);
						break;
					case "constrictingChest":
						if (_resultStrings.constrictingChest === undefined) {
							_resultStrings.constrictingChest = {
								"start": "당신의 임신한 몸이 너무 민감해서 ",
								"joiner": "그리고",
								"end": "착용할 수 없었다.",
								"names": [],
								"color": "red"
							}
						}
						_resultStrings.constrictingChest.names.push(notEquippedItem.name);
						break;
					case "corruption_slime_deny":
						if (_resultStrings.corruption_slime_deny === undefined) {
							_resultStrings.corruption_slime_deny = {
								"start": "당신은 귓속의 슬라임이 허락해 주지 않아서 ",
								"joiner": "그리고",
								"end": " 착용할 수 없었다.",
								"names": [],
								"color": "red"
							}
						}
						_resultStrings.corruption_slime_deny.names.push(notEquippedItem.name);
						break;
					case "corruption_slime_deny_commando":
						if (_resultStrings.corruption_slime_deny_commando === undefined) {
							_resultStrings.corruption_slime_deny_commando = {
								"start": "당신은 귓속의 슬라임이 속옷을 입지 말라고 명령해서 ",
								"joiner": "그리고",
								"end": " 착용할 수 없었다.",
								"names": [],
								"color": "red"
							}
						}
						_resultStrings.corruption_slime_deny_commando.names.push(notEquippedItem.name);
						break;
					case "corruption_slime_deny_forcedDressing":
						if (_resultStrings.corruption_slime_deny_forcedDressing === undefined) {
							_resultStrings.corruption_slime_deny_forcedDressing = {
								"start": `당신은 귓속의 슬라임이 더 ${$earSlime.forcedDressing.type is "f" ? "여성스러운" : "남성스러운"} 복장만을 입도록 해서 `,
								"joiner": "그리고",
								"end": ` 착용할 수 없었다.`,
								"names": [],
								"color": "red"
							}
						}
						_resultStrings.corruption_slime_deny_forcedDressing.names.push(notEquippedItem.name);
						break;
					case "cursed slot":
						if (_resultStrings.cursed === undefined) {
							_resultStrings.cursed = {
								"start": "당신은 현재 착용하고 있는 것을 벗을 수가 없어서 ",
								"joiner": "그리고",
								"end": " 착용할 수 없었다.",
								"names": [],
								"color": "red"
							}
						}
						_resultStrings.cursed.names.push(notEquippedItem.name);
						break;
					case "cursed unequip":
						if (_resultStrings.cursedUnequip === undefined) {
							_resultStrings.cursedUnequip = {
								"start": "당신은 현재 착용하고 있는 것을 스스로 벗을 수가 없어서 ",
								"joiner": "그리고",
								"end": " 착용할 수 없었다.",
								"names": [],
								"color": "red"
							}
						}
						_resultStrings.cursedUnequip.names.push(notEquippedItem.name);
						break;
					case "not found piece":
						if (V.worn[slot].name === notEquippedItem.name) break;
						if (_resultStrings.notFoundPiece === undefined) {
							_resultStrings.notFoundPiece = {
								"start": "예기치 못한 문제로 (대부분 세이브파일 에러로) 당신은 ",
								"joiner": "그리고",
								"end": " 완전히 착용할 수 없었다. 관련 아이템을 버리고 다른 것으로 교체하면 아마도 이 문제를 해결할 수 있을 것이다.",
								"names": [],
								"color": "red"
							}
						}
						_resultStrings.notFoundPiece.names.push(notEquippedItem.name);
						break;
				}
			})>>
			<<for $_clothingStrings range _resultStrings>>
				<<if $_clothingStrings.names.length gt 0>>
					<<set _string to $_clothingStrings.start>>
					<<set _trResult to formatList($_clothingStrings.names, $_clothingStrings.joiner)>><<trPost _postNum "을">><<set _string += _trResult>>
					<<set _string += $_clothingStrings.end>>
					<span @class="$_clothingStrings.color">_string</span>
					<br>
				<</if>>
			<</for>>
		<</if>>
	<</if>>

	<<set $wear_outfit to "none">>
	<<unset $storeLocation>>
<</widget>>

<<widget "overwriteoutfit">>
	<<if $delete_outfit is 2 and $wear_outfit isnot "none">>
		<<set _equip to setup.clothingLayer.all>>
		<<set _outfit to $outfit[$wear_outfit]>>
		<<for $_slot range _equip>>
			<<set _outfit[$_slot] to $worn[$_slot].name>>
			<<if _outfit.colors>>
				<<set _outfit.colors[$_slot] to [clone($worn[$_slot].colour),clone($worn[$_slot].accessory_colour)]>>
				<<if $worn[$_slot].colour is "custom" or $worn[$_slot].accessory_colour is "custom">>
					<<run _outfit.colors[$_slot+"custom"] to [clone($worn[$_slot].colourCustom),clone($worn[$_slot].accessory_colourCustom)]>>
				<</if>>
			<</if>>
		<</for>>
		<<set $wear_outfit to "none">>
	<</if>>
<</widget>>

<<widget "outfitEditor">>
	<<link "필터 설정">><<toggleclass "#outfitEditorFilter" "hidden">><</link>> |
	<<link "도움말">><<toggleclass "#outfitEditorHelp" "hidden">><</link>>

	<div id="outfitEditorHelp" class="hidden">
		여기에서 변경하는 복장의 모든 설정들은 바로 변경되지만, 당신이 경로(passage)를 변경해야 변경점이 저장됩니다 (옷장에서 나오거나 이 화면 아래의 '옷장 갱신'을 누르면 됩니다).
		<br><br>
		복장 구성을 변경하면 그 부분의 지정된 색상도 초기화되는 결과가 있을 수 있습니다. 이것은 색상 지정이 가능한 옷을 색상 지정이 불가능한 옷으로 바꿀 경우 일어납니다. 당신이 리스트에서 옷을 변경할 수 있다고 해도 당신이 모든 옷을 사용할 수 있다는 의미는 아닙니다.
		<br><br>
		위치는 그 복장이 특별하며 그 옷장에서만 보인다는 것을 의미합니다. '접근 불가'라는 표시가 있다면, 이것은 여러 개의 옷장 설정이 되어있거나 게임이 더 진행된 후에 사용이 가능하다는 것을 의미합니다. 대부분의 경우 '고아원' 옷장은 여러 개의 옷장 설정이 '격리된 장소에서는 사용' 이나 하나의 옷장만 사용하는 경우 공유됩니다.
		<br><br>
	</div>
	<<if _outfitEditorFilter is undefined>>
		<<outfitEditorDefaultFilter>>
	<</if>>
	<<outfitEditorUpdateFilter>>
	<<set _subState to {}>>

	<div id="outfitEditorFilter" class="hidden">
		<<outfitEditorFilter>>
	</div>
	<div id="outfitEditor">
		<<outfitEditorList>>
	</div>
	<<link [[옷장 갱신|$passage]]>><</link>>
<</widget>>

<<widget "outfitEditorFilter">>
	<h4>필터</h4>
	<label>페이지당 복장 수: <<numberslider "$outfitEditorPerPage" $outfitEditorPerPage 5 20 1>></label>
	<br><br>
	종류:
	<label><<checkbox "_outfitEditorFilter.type.normal" false true autocheck>> 평상복</label> |
	<label><<checkbox "_outfitEditorFilter.type.sleep" false true autocheck>> 잠옷</label> |
	<label><<checkbox "_outfitEditorFilter.type.swim" false true autocheck>> 수영복</label> |
	<label><<checkbox "_outfitEditorFilter.type.school" false true autocheck>> 교복 (시작시의 복장에서만 사용되며, 나중에 추가될 수 있음)</label> |
	<br><br>
	위치:
	<<for $_label, $_value range _outfitEditorFilter.location>>
		<<set $_name to $wardrobes[$_label] ? $wardrobes[$_label].name : $_label>>
		<<set $_var to "_outfitEditorFilter.location." + $_label>>
		<<capture $_var>>
			<label>
				<<checkbox $_var false true autocheck>> <<trWardrobeName $_name>><<print _trResult>>
				<<if (!$multipleWardrobes or ($multipleWardrobes is "isolated" and !$_value.isolated)) and $_label isnot "wardrobe">>
					(접근 불가)
				<</if>>
			</label> |
		<</capture>>
	<</for>>
	<br><br>
	복장에 저장된 색상:
	<label><<checkbox "_outfitEditorFilter.colors.notSaved" false true autocheck>> 아니오</label> |
	<label><<checkbox "_outfitEditorFilter.colors.saved" false true autocheck>> 네</label> |
	<br><br>
	<<link "필터 갱신">>
		<<outfitEditorUpdateFilter>>
		<<replace "#outfitEditor">><<outfitEditorList>><</replace>>
	<</link>> |
	<<link "필터 초기화">>
		<<outfitEditorDefaultFilter>>
		<<outfitEditorPageSetup>>
		<<replace "#outfitEditorFilter">><<outfitEditorFilter>><</replace>>
		<<replace "#outfitEditor">><<outfitEditorList>><</replace>>
	<</link>>
	<br><br>
<</widget>>

<<widget "outfitEditorDefaultFilter">>
	<<if $outfitEditorPerPage is undefined>>
		<<set $outfitEditorPerPage to 10>>
	<</if>>
	<<set _outfitEditorFilter to {
		type:{
			normal: true,
			sleep: true,
			swim: true,
			school: true,
		},
		location:{
			All: true,
			disabled: true,
		},
		colors:{
			notSaved: true,
			saved: true
		},
		outfitIndex:[],
	}>>
	<<for $_label, $_value range $wardrobes>>
		<<if $_value.unlocked>>
			<<set _outfitEditorFilter.location[$_label] to true>>
		<</if>>
	<</for>>
	<<set _outfitEditorFilter.outfitIndex to []>>
	<<run $outfit.forEach((item, index) => {T.outfitEditorFilter.outfitIndex.push(index);})>>
<</widget>>

<<widget "outfitEditorUpdateFilter">>
	<<set _outfitEditorFilter.outfitIndex to []>>
	<<run $outfit.forEach((item, index) => {
		if(T.outfitEditorFilter.type[item.type[0]]){
			if((T.outfitEditorFilter.location.All && item.type[0].location === undefined) || T.outfitEditorFilter.location[item.type[0].location]){
				if((!item.colors && T.outfitEditorFilter.colors.notSaved) || (item.colors && T.outfitEditorFilter.colors.saved)){
					T.outfitEditorFilter.outfitIndex.push(index);
				}
			}
		}
	})>>
	<<outfitEditorPageSetup>>
<</widget>>

<<widget "outfitEditorPageSetup">>
	<<set _outfitEditorPages to {
		page:1,
		perPage:$outfitEditorPerPage
	}>>
	<<set _outfitEditorPages.maxPages to Math.ceil(_outfitEditorFilter.outfitIndex.length / _outfitEditorPages.perPage)>>
<</widget>>

<<widget "outfitEditorList">>
	<<outfitEditorPageControls>>
	<div id="outfitEditorList">
	<<set $_start to (_outfitEditorPages.page - 1) * _outfitEditorPages.perPage>>
	<<for $_i to $_start; $_i lt $_start + _outfitEditorPages.perPage; $_i++>>
		<<set _index to _outfitEditorFilter.outfitIndex[$_i]>>
		<<if !$outfit[_index]>>
			<<break>>
		<</if>>
		<div @id="'outfitItem-' + _index" class="outfitEditorItem">
			<<outfitEditorItem _index>>
		</div>
	<</for>>
	</div>
	<<outfitEditorPageControls>>
<</widget>>

<<widget "outfitEditorPageControls">>
	<<if _outfitEditorPages.page gt 1>>
		<<link "이전">>
			<<set _outfitEditorPages.page-->>
			<<replace "#outfitEditor">><<outfitEditorList>><</replace>>
		<</link>> |
	<<else>>
		이전 |
	<</if>>
	페이지 <<print _outfitEditorPages.page>>/<<print _outfitEditorPages.maxPages>> |
	<<if _outfitEditorPages.page lt _outfitEditorPages.maxPages and _outfitEditorPages.maxPages gt 1>>
		<<link "다음">>
			<<set _outfitEditorPages.page++>>
			<<replace "#outfitEditor">><<outfitEditorList>><</replace>>
		<</link>>
	<<else>>
		다음
	<</if>>
<</widget>>

<<widget "outfitEditorItem">>
	<<capture _args[0]>>
		<<set _subState[_args[0]] to "">>
		<div class="name">
			<<set $_name to "$outfit["+_args[0]+"].name">>
			<label>이름: <<textbox $_name $outfit[_args[0]].name>></label>
			<!--Runs too many times for some reason, needs to be improved-->
			<<run $(() => { $('.outfitEditorItem .name .macro-textbox').on('input change', e => {
				let index = e.target.name.replace(/\D/g,'');
				V.outfit[index].name = V.outfit[index].name.replace(/[^a-zA-Z가-힣\u4e00-\u9fa5 0-9.!()]+/g,"").substr(0,30);
			}).trigger('input change') })>>
		</div>
		<div>
			<<set $_type to "$outfit["+_args[0]+"].type[0]">>
			<label>
				종류:
				<<listbox $_type autoselect>>
					<<option "평상복" "normal">>
					<<option "잠옷" "sleep">>
					<<option "수영복" "swim">>
					<<option "교복" "school">>
				<</listbox>>
			</label>
		</div>
		<div>
			<<set $_location to "$outfit["+_args[0]+"].location">>
			<<set $_locations to {}>>
			<<for $_label, $_value range $wardrobes>>
				<<if $_value.unlocked>>
					<<set _warning to "">>
					<<if (!$multipleWardrobes or ($multipleWardrobes is "isolated" and !$_value.isolated)) and $_label isnot "wardrobe">>
						<<set _warning to " (접근 불가)">>
					<</if>>
					<<trWardrobeName $_value.name>><<set $_locations[_trResult + _warning] to $_label>>
				<</if>>
			<</for>>
			<label>
				위치:
				<<listbox $_location autoselect>>
					<<option "전부" undefined>>
					<<option "사용않음" "disabled">>
					<<optionsfrom $_locations>>
				<</listbox>>
			</label>
		</div>
		<div>
			구성:
			<<link "보기">>
				<<set _subId to "#outfitItemSub-" + _args[0]>>
				<<if _subState[_args[0]] is "itemEdit">>
					<<set _subState[_args[0]] to "">>
					<<replace _subId>><</replace>>
				<<else>>
					<<set _subState[_args[0]] to "itemEdit">>
					<<replace _subId>><<outfitEditorItemClothes _args[0]>><</replace>>
				<</if>>
			<</link>>
		</div>
		<div>
			색상 지정: <<print $outfit[_args[0]].colors ? "사용" : "사용않음">> |
			<<if $outfit[_args[0]].colors>>
				<<link "사용않음">>
					<<set $outfit[_args[0]].colors to false>>
					<<set _id to "#outfitItem-" + _args[0]>>
					<<replace `_id`>><<outfitEditorItem _args[0]>><</replace>>
				<</link>> |
				<<link "편집">>
					<<set _subId to "#outfitItemSub-" + _args[0]>>
					<<if _subState[_args[0]] is "colourView">>
						<<set _subState[_args[0]] to "">>
						<<replace _subId>><</replace>>
					<<else>>
						<<set _subState[_args[0]] to "colourView">>
						<<replace _subId>><<outfitEditorItemColour _args[0]>><</replace>>
					<</if>>
				<</link>>
			<<else>>
				<<link "사용">>
					<<set $outfit[_args[0]].colors to {}>>
					<<set _outfitIndex to _args[0]>>
					<<for _label, _value range setup.clothes>>
						<<set _item to setup.clothes[_label].filter((item) => item.name === $outfit[_outfitIndex][_label])[0]>>
						<<set _colors to [0,0]>>
						<<if _item>>
							<<if _item.colour_options.length gt 0>>
								<<set _colors[0] to _item.colour_options[0]>>
							<</if>>
							<<if _item.accessory_colour_options.length gt 0>>
								<<set _colors[1] to _item.accessory_colour_options[0]>>
							<</if>>
						<</if>>
						<<set $outfit[_args[0]].colors[_label] to clone(_colors)>>
					<</for>>
					<<set _id to "#outfitItem-" + _args[0]>>
					<<replace `_id`>><<outfitEditorItem _args[0]>><</replace>>
				<</link>>
			<</if>>
		</div>
		<<if $savedHairStyles>>
			<div>
				<<set _savedHairStylesKeys to Object.keys($savedHairStyles)>>
				머리모양:
				<<set $_hairStyle to "$outfit["+_args[0]+"].hairStyle">>
				<<listbox $_hairStyle autoselect>>
					<<option "설정 않음" undefined>>
					<<optionsfrom _savedHairStylesKeys>>
				<</listbox>>
			</div>
		<<else>>
			<div>
				머리모양: 저장된 설정이 없습니다 (거울을 확인하세요)
			</div>
		<</if>>
		<div @id="'outfitItemSub-' + _args[0]"></div>
	<</capture>>
<</widget>>

<<widget "outfitEditorItemClothes">>
	<<capture _args[0]>>
		<<for $_label, $_value range setup.clothes>>
			<<set $_itemName to $outfit[_args[0]][$_label]>>
			<<if $_itemName and !setup.clothingLayer.over.includes($_label)>>
				<label class="outfitEditorItemClothes">
					<<set $_options to {}>>
					<<for $_value2 range $_value>>
						<<trClothes $_label $_value2.name "name">><<set $_options[_trResult] to $_value2.name>>
					<</for>>
					<<trClothesType $_label>><<print _trResult>> -
					<<set $_var to "$outfit[" + _args[0] + "]['" + $_label + "']">>
					<<listbox `$_var` autoselect>>
						<<optionsfrom $_options>>
					<</listbox>>
					<!--Runs too many times for some reason, needs to be improved-->
					<<run $(() => { $('.outfitEditorItemClothes select').on('input change', e => {
						let outfitIndex = e.target.name.replace(/\D/g,'');
						if(!V.outfit[outfitIndex].colors) return;

						let target = e.target.name.match(/[a-zA-Z]+/g);
						let slot = target[2] + (target[3] !== undefined ? '_' + target[3] : '');
						let item = setup.clothes[slot].filter((item) => item.name === V.outfit[outfitIndex][slot])[0];
						if(item !== undefined){
							if(item.colour_options.length > 0 && V.outfit[outfitIndex].colors[slot][0] === 0){
								V.outfit[outfitIndex].colors[slot][0] = item.colour_options[0];
							} else if(item.colour_options.length === 0 && V.outfit[outfitIndex].colors[slot][0] !== 0) {
								V.outfit[outfitIndex].colors[slot][0] = 0;
							}
							if(item.accessory_colour_options.length > 0 && V.outfit[outfitIndex].colors[slot][1] === 0){
								V.outfit[outfitIndex].colors[slot][0] = item.accessory_colour_options[0];
							} else if(item.accessory_colour_options.length === 0 && V.outfit[outfitIndex].colors[slot][1] !== 0) {
								V.outfit[outfitIndex].colors[slot][1] = 0;
							}
						}
					}).trigger('input change') })>>
				</label>
				<br>
			<</if>>
		<</for>>
	<</capture>>
<</widget>>

<<widget "outfitEditorItemColour">>
	<<capture _args[0]>>
		<<for $_label, $_value range setup.clothes>>
			<<set _colourLabel to $_label>>
			<<set _colourOutfit to _args[0]>>
			<<set $_item to setup.clothes[$_label].filter((item) => item.name === $outfit[_colourOutfit][_colourLabel])[0]>>
			<<if $_item>>
				<<if $_item.colour_options.length gt 0 or $_item.accessory_colour_options.length gt 0>>
					<<trClothesType $_label>><<print _trResult>> - <<trClothes $_label $_item.name "name">><<print _trResult>>:
					<<if $_item.colour_options.length gt 0>>
						<<set $_colour_options to "$outfit["+_args[0]+"].colors['"+$_label+"'][0]">>
						<<set _trTempColours to $_item.colour_options>><<trListboxItemsFromArray "_trTempColours">><<listbox `$_colour_options` autoselect>>
							<<optionsfrom _trListboxItems>>
							<<option "무작위" "random">>
						<</listbox>>
					<</if>>
					<<if $_item.accessory_colour_options.length gt 0>>
						<<set $_accessory_colour_options to "$outfit["+_args[0]+"].colors['"+$_label+"'][1]">>
						<<set _trTempColours to $_item.accessory_colour_options>><<trListboxItemsFromArray "_trTempColours">><<listbox `$_accessory_colour_options` autoselect>>
							<<optionsfrom _trListboxItems>>
							<<option "무작위" "random">>
						<</listbox>>
					<</if>>
					<br>
				<</if>>
			<</if>>
		<</for>>
	<</capture>>
<</widget>>
