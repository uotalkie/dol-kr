:: Pregnancy [widget]

<<widget "moveCreature">>
/*0 -> _pregnancy.fetus[_i] or location (any but portable)*/
/*1 -> Type*/
/*2 -> locationId*/
<<if _args[0] isnot null and _args[1]>>
	<<set _portable to $container.portable>>
	<<set _container to $container[$phase]>>
	<<set $_pregnancy to $sexStats[_args[3] or "anus"].pregnancy>>

	<<set _result to _args[1]>>
	<<switch _args[0]>>
		<<case 0 1 2 3>>
			<!-- With a number as argument 0, it takes the parasite of that argument in your current pregnancy item -->
			<<set _creature to clone($_pregnancy.fetus[_args[0]])>>
		<<default>>
			<!-- With a string as argument 0, it takes a parasite from the container matching the argument. Which parasite it takes corresponds to argument 2 -->
			<!-- Currently only used when transferring parasites for selling in :: Containers, inside a for loop -->
			<<if _args[2] isnot null>>
				<<set _creature to clone($container[_args[0]].creatures[_args[2]])>>
			<</if>>
	<</switch>>

	<<if _creature>>
		<<if _result is "destroy">>
			<!-- Simply gets rid of the parasite -->
			<<set _creature to null>>
			<<removeCreature _args[0] _args[2] _args[3]>>
		<<elseif _result is "portable">>
			<!-- Transfers the parasites for selling. The value of the parasite depends on its growth stat -->
			<<set _portable.creatures.push(clone(_creature))>>
			<<set _value to Math.floor(1000 / _creature.stats.growth)>>
			<<set _portable.value += _value>>
			<<removeCreature _args[0] _args[2] _args[3]>>
		<<elseif _result is "replace" and _args[2] isnot null and _args[0] gte 0 and _args[0] lte 3>>
			<!-- Replaces an existing parasite, for when you birth more than you can currently store -->
			<!-- The replaced parasite gets transferred for selling -->
			<<if _container.creatures[_i] isnot undefined>>
				<<if _container.creatures[_i] isnot null>>
					<<set _portable.creatures.push(clone(_container.creatures[_args[2]]))>>
					<<set _value to Math.floor(1000 / _container.creatures[_args[2]].stats.growth)>>
					<<set _portable.value += _value>>
					<<set _container.creatures[_args[2]] to clone(_creature)>>
					<<set _replaced to true>>
				<</if>>
			<</if>>
			<<if _replaced isnot true>>
				<<set _container.creatures[_args[2]] to clone(_creature)>>
				<<set _container.count += 1>>
			<</if>>
			<<removeCreature _args[0] undefined _args[3]>>
		<<elseif _result is "container">>
			<!-- Keeps the parasite and moves it to the current container -->
			<<set _moveTo to false>>
			<<for _containerSlot to 0; _containerSlot lt _container.maxCount; _containerSlot++>>
				<<if _container.creatures[_containerSlot] is undefined>>
					<<set _moveTo to true>>
				<<elseif _container.creatures[_containerSlot] is null>>
					<<set _moveTo to true>>
				<</if>>
				<<if _moveTo is true>>
					<<set $container[$phase].creatures[_containerSlot] to clone(_creature)>>
					<<set $container[$phase].count += 1>>
					<<removeCreature _args[0] _args[2] _args[3]>>
					<<break>>
				<</if>>
			<</for>>
		<</if>>
	<</if>>
<</if>>
<</widget>>

<<widget "removeCreature">>
	<<if _args[0] isnot null>>
		<<set $_pregnancy to $sexStats[_args[2] or "anus"].pregnancy>>
		<<switch _args[0]>>
			<<case 0 1 2 3>>
				<!-- With a number as argument 0, it removes the parasite of that argument in your current pregnancy item -->
				<<set $_pregnancy.fetus[_args[0]].toDelete to true>>
				<<set $_pregnancy.parasiteBirthEvents += 1>>
				<<if $_pregnancy.motherStatus is 0 and $_pregnancy.parasiteBirthEvents gte 3>>
					<<set $_pregnancy.motherStatus to 1>>
				<</if>>
			<<default>>
				<!-- With a string as argument 0, it removes a parasite from the container matching the argument. Which parasite it takes corresponds to argument 1 -->
				<<if _args[1] isnot null>>
					<<set $container[_args[0]].creatures[_args[1]] to null>>
					<<set $container[_args[0]].count -= 1>>
				<</if>>
		<</switch>>
	<</if>>
<</widget>>

<<widget "clearToDeleteParasiteFetus">>
<<if $sexStats.anus.pregnancy.type is "parasite">>
	<<run $sexStats.anus.pregnancy.fetus to $sexStats.anus.pregnancy.fetus.filter(child => child && !child.toDelete)>>
	<<if $sexStats.anus.pregnancy.fetus.length is 0>>
		<<set $sexStats.anus.pregnancy.type to null>>
	<</if>>
<</if>>
<<if $sexStats.vagina.pregnancy.type is "parasite">>
	<<run $sexStats.vagina.pregnancy.fetus to $sexStats.vagina.pregnancy.fetus.filter(child => child && !child.toDelete)>>
	<<if $sexStats.vagina.pregnancy.fetus.length is 0>>
		<<set $sexStats.vagina.pregnancy.type to null>>
	<</if>>
<</if>>
<</widget>>

<<widget "menstruationCycle">>
<<set $sexStats.vagina.menstruation.running to $player.vaginaExist or (!$player.vaginaExist and V.skin.pubic.pen is "magic" and V.skin.pubic.special is "pregnancy")>>
<<if $sexStats.vagina.menstruation.running is true>>
	<<set _menstruation to $sexStats.vagina.menstruation>>
	<<set $_pregLocation to ($player.vaginaExist ? "vagina" : "anus")>>
	<<set $_pregnancy to $sexStats[$_pregLocation].pregnancy>>
	<<set _pills to $sexStats.pills>>
	<<set $_last_preg_pill to clone(_pills.lastTaken.pregnancy)>>
	<<switch _menstruation.currentState>>
		<<case "normal">>
			<<if _menstruation.currentDay lt _menstruation.currentDaysMax>>
				/*Continue the cycle again*/
				<<if _menstruation.currentDay gte _menstruation.currentDaysMax / 2 and _menstruation.lastDaysMax isnot _menstruation.currentDaysMax>>
				<</if>>
				<<if _menstruation.currentDay lt _menstruation.stages[1]>>
					/*Menstrual phase - period occurs right at the start of this part*/
					<<if $_last_preg_pill is "fertility booster" and _pills.pills[$_last_preg_pill].doseTaken gte 2>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if $_last_preg_pill is "contraceptive" and (random(0,100) gte 50 or _pills.pills[$_last_preg_pill].doseTaken gte 2)>>
					<<else>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
				<<elseif _menstruation.currentDay lt _menstruation.stages[2]>>
					/*Follicular phase*/
					<<if $_last_preg_pill is "fertility booster" and _pills.pills[$_last_preg_pill].doseTakenn gte 2 and _menstruation.currentDay lt _menstruation.stages[2]>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy" and _menstruation.currentDay lt _menstruation.stages[2]>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if _menstruation.currentDay lt _menstruation.stages[2]>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					/*Check for pregnancy at a reduced chance for a few days before*/
					<<if _menstruation.currentDay gte _menstruation.stages[3] - 4>>
						<<set $_multi = Math.clamp(Math.ceil(2 * (1 + _menstruation.stages[3] - _menstruation.currentDay)),2,10)>>
						<<playerPregnancyAttempt $_multi $_pregLocation>>
					<</if>>
				<<elseif _menstruation.currentDay lt _menstruation.stages[3]>>
					/*Ovulation phase*/
					<<set _menstruation.currentDay += 0.5>>
					<<set _menstruation.lastDaysMax to _menstruation.currentDaysMax>>

					/*Check for pregnancy*/
					<<playerPregnancyAttempt 1 $_pregLocation>>
				<<else>>
					/*Luteal phase*/
					/*Check for pregnancy at a reduced chance for a few days after*/
					<<if _menstruation.currentDay lte _menstruation.stages[3] + 4>>
						<<set $_multi = Math.clamp(Math.ceil(2 * (1 + _menstruation.currentDay - _menstruation.stages[3])),2,10)>>
						<<playerPregnancyAttempt $_multi $_pregLocation`>>
					<</if>>
					<<if $_last_preg_pill and _pills.pills[$_last_preg_pill].doseTaken gte 2>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
					<<if $_last_preg_pill is "contraceptive" and (random(0,100) gte 50 or _pills.pills[$_last_preg_pill].doseTaken gte 2)>>
					<<else>>
						<<set _menstruation.currentDay += 0.5>>
					<</if>>
				<</if>>
			<<else>>
				/*Start the cycle again*/
				<<restartMenstruationCycle>>
				<<set _menstruation.periodEnabled to true>>
			<</if>>
		<<case "pregnant">>
			<<switch _pregnancy.type>>
				<<case "human">><<set _multiplier to (1/(1/9*$humanPregnancyMonths))>>
				<<case "wolf">><<set _multiplier to (1/(1/12*$wolfPregnancyWeeks))>>
				<<default>><<set _multiplier to 1>>
			<</switch>>
			<<set $_pregnancy.timer += parseFloat((0.5 * _multiplier).toFixed(3))>>

			/*Keeping fatigue low should help morning sickness*/
			<<if between($_pregnancy.timer / $_pregnancy.timerEnd, 0.15, 0.25)>>
				/*Early Morning sickness*/
				/*Light Nausea/dizzyness at any time of day, but mostly when waking up*/
				<<if random(0,100) gte 30>>
					<<set $pregnancyStats.morningSicknessWaking to 1>>
				<</if>>
				<<if random(0,100) gte 30>>
					<<set $pregnancyStats.morningSicknessGeneral to 1>>
				<</if>>
			<<elseif between($_pregnancy.timer / $_pregnancy.timerEnd, 0.24, 0.45)>>
				/*Morning sickness*/
				/*Nausea/dizzyness at any time of day, but mostly when waking up*/
				/*First pregnancy should be worse*/
				<<set $pregnancyStats.morningSicknessWaking to [1,2,2][random(0,2)]>>
				<<if $_pregnancy.totalBirthEvents is 0 and $pregnancyStats.morningSicknessWaking lt 2>>
					<<set $pregnancyStats.morningSicknessWaking to 2>>
				<</if>>
				<<if random(0,100) gte 20>>
					<<set $pregnancyStats.morningSicknessGeneral to [1,2,2][random(0,2)]>>
				<</if>>
			<</if>>
			<<if $_pregnancy.timer gte $_pregnancy.timerEnd>>
				<<set _menstruation.currentState to "pregnantEnd">>
				<<if $player.breastsize lte 4 and $player.breastsize lt $breastsizemax>>
					<<set $player.breastsize += 1>><<set $breastgrowthtimer to 700>>
					<<if $player.breastsize lte 4 and $player.breastsize lt $breastsizemax>>
						<<set $player.breastsize += 1>>
					<</if>>
					<<set $breastgrowthmessage to $player.breastsize>><<set $effectsmessage to 1>>
					<<set $player.breastsize to Math.clamp($player.breastsize, 0, 12)>>
				<</if>>
				<<if $lactating isnot 1 and $player.breastsize gt 0>>
					<<set $lactating to 1>>
					<<set $lactation_pressure to 100>>
					<<milkvolume 50>>
					<<set $effectsmessage to 1>>
					<<set $lactationmessage to 1>>
				<</if>>
			<</if>>
		<<case "recovering">>
			<<set _menstruation.recoveryTime -= 0.5>>
			<<if $_last_preg_pill is "fertility booster">>
				<<switch _pills.pills[$_last_preg_pill].doseTaken>>
					<<case 1>><<set _menstruation.recoveryTime -= 0.5>>
					<<case 2 3 4>><<set _menstruation.recoveryTime -= 1>>
				<</switch>>
			<</if>>
			<<if $skin.pubic.type is "magic" and $skin.pubic.special is "pregnancy">>
				<<set _menstruation.recoveryTime -= 0.5>>
			<</if>>
			<<if $_pregnancy.totalBirthEvents gt 2>>
				<<set _menstruation.recoveryTime -= 0.5>>
			<</if>>
			<<set _menstruation.recoveryStage to Math.floor((1 - (_menstruation.recoveryTime / _menstruation.recoveryTimeStart))*5)>>
			<<if _menstruation.recoveryTime lte 0>>
				<<set $effectsmessage to 1>>
				<<set $recovered_from_pregnancy to 1>>
				/*Ready to give birth again*/
				<<restartMenstruationCycle>>
				<<set _menstruation.currentState to "normal">>
				<<set _menstruation.recoveryTime to null>>
				<<set _menstruation.recoveryTimeStart to null>>
				<<set _menstruation.recoveryStage to null>>
			<</if>>
	<</switch>>
<</if>>
<<updateRecordedSperm "vagina">>
<<updateRecordedSperm "anus">>
<</widget>>

:: Pregnancy2 [widget]

<<widget "updateRecordedSperm">>
<<set _sperm to $sexStats[_args[0]].sperm>>
<<for $_label, $_value range _sperm>>
	<<for _i to $_value.count.length - 1; _i gte 0; _i-->>
		<<set $_value.count[_i][0] -= 0.5>>
		<<if $_value.count[_i][0] lte 0>>
			<<run _sperm[$_label].count.deleteAt(_i)>>
		<</if>>
	<</for>>
	<<if $_value.count.length is 0>>
		<<run delete _sperm[$_label]>>
	<</if>>
<</for>>
<</widget>>

/*args[0] - potential mother, args[1] - npc fullDescription or "pc", _args[2] - type of pregnancy, _args[3] - _daysTillRemoval override for specific events*/
<<widget "recordVaginalSperm">>
/*ToDo: Pregnancy, remove $pregnancyTesting to properly enable*/
<<if _args[0] and _args[1] and _args[2] and $pregnancyTesting>>
	<<if _args[0] is "pc">>
		<<set $_sperm to $sexStats.vagina.sperm>>
	<<elseif $NPCNameList.includes(_args[0]) and $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy.enabled>>
		<<set $_sperm to $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy.sperm>>
	<</if>>
	<<if $_sperm>>
		<<if $_sperm[_args[1]] is undefined>>
			<<set $_sperm[_args[1]] to {"type":_args[2], count:[]}>>
		<</if>>
		<<if _args[3]>>
			<<set _daysTillRemoval to _args[3]>>
		<<else>>
			<<set _daysTillRemoval to random(4,8)>>
		<</if>>
		<<for $_i to 0; $_i lt $_sperm[_args[1]].count.length;$_i++>>
			<<if $_sperm[_args[1]].count[$_i][0] is _daysTillRemoval>>
				<<set $_sperm[_args[1]].count[$_i][1] += 1>>
				<<set $_found to true>>
			<</if>>
		<</for>>
		<<if $_found isnot true>>
			<<set $_sperm[_args[1]].count.push([_daysTillRemoval, 1])>>
		<</if>>
	<</if>>
<</if>>
<</widget>>

<<widget "recordAnusSperm">>
/*ToDo: Pregnancy, remove $pregnancyTesting to properly enable*/
<<if _args[0] and _args[1] and _args[2] and $pregnancyTesting>>
	<<if _args[0] is "pc">>
		<<set $_sperm to $sexStats.anus.sperm>>
	<<elseif $NPCNameList.includes(_args[0]) and $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy.enabled>>
		/*<<set $_sperm to $NPCName[$NPCNameList.indexOf(_args[0])].pregnancy.sperm>> Not tracking right now*/
	<</if>>
	<<if $_sperm>>
		<<if $_sperm[_args[1]] is undefined>>
			<<set $_sperm[_args[1]] to {"type":_args[2], count:[]}>>
		<</if>>
		<<if _args[3]>>
			<<set _daysTillRemoval to _args[3]>>
		<<else>>
			<<set _daysTillRemoval to random(4,8)>>
		<</if>>
		<<for $_i to 0; $_i lt $_sperm[_args[1]].count.length;$_i++>>
			<<if $_sperm[_args[1]].count[$_i][0] is _daysTillRemoval>>
				<<set $_sperm[_args[1]].count[$_i][1] += 1>>
				<<set $_found to true>>
			<</if>>
		<</for>>
		<<if $_found isnot true>>
			<<set $_sperm[_args[1]].count.push([_daysTillRemoval, 1])>>
		<</if>>
	<</if>>
<</if>>
<</widget>>

<<widget "bodyPregCalc">>
<<switch $bodysize>>
	<<case 0>><<set _bodySize to ["tiny","tiny","tiny","small","small","normal","large"]>>
	<<case 1>><<set _bodySize to ["tiny","tiny","small","small","small","normal","normal","large"]>>
	<<case 2>><<set _bodySize to ["tiny","small","small","normal","normal","normal","large","large"]>>
	<<case 3>><<set _bodySize to ["tiny","small","normal","normal","large","large","large"]>>
	<<default>>
<</switch>>
<<set _hairColour to [$naturalhaircolour, $naturalhaircolour, $naturalhaircolour, $naturalhaircolour,"red","jetblack","black","brown","burntorange","platinumblond","strawberryblond","ginger","ashyblond","blond"]>>
<</widget>>

/*Don't call outside of the menstruationCycle widget*/
<<widget "restartMenstruationCycle">>
<<set _menstruation.currentDay to 0.5>>
<<set _menstruation.currentDaysMax to _menstruation.baseDays + random(0, _menstruation.baseDaysRng)>>
<<set _stage2 to Math.round(_menstruation.currentDaysMax * 0.17)>>
<<if _stage2 gte 4>>
	<<set _stage2-->>
<</if>>
<<set _stage3 to Math.round(_menstruation.currentDaysMax * 0.5)>>
<<if _stage3 lt 13>>
	<<set _stage3++>>
<<elseif _stage3 gte 18>>
	<<set _stage3-->>
<</if>>
<<set _menstruation.stages to [0, _stage2, _stage3, _stage3 + random(1,2) * 0.5]>>
<</widget>>

/*args[0] - birth location, _args[1] - next passage, _args[2] - time passage*/
<<widget "birthUi">>
<<if $player.vaginaExist>>
	<<set $_pregnancy to $sexStats.vagina.pregnancy>>
<<else>>
	<<set $_pregnancy to $sexStats.anus.pregnancy>>
<</if>>
<div id="birthUi">
	<<for _i to 0; _i lt $_pregnancy.fetus.length; _i++>>
		<<capture _i>>
			<div @id="'child-' + _i" class="childUi">
				<<birthChildElement _i>>
			</div>
		<</capture>>
	<</for>>
</div>
<br>
<<if _args[2]>>
	<<set _hours to Math.floor(_args[2] / 60)>>
	<<set _minutes to _args[2] % 60>>
	<<set _timeString to " (" + (_hours lt 10 ? "0": "") +_hours+":"+(_minutes lt 10 ? "0": "")+_minutes+")">>
<</if>>
<<link [["Next" + (_args[2] ? _timeString : "")|_args[1]]]>>
	<<endPlayerPregnancy _args[0]>>
<</link>>
<</widget>>

<<widget "birthChildElement">>
<<if $player.vaginaExist>>
	<<set $_pregnancy to $sexStats.vagina.pregnancy>>
<<else>>
	<<set $_pregnancy to $sexStats.anus.pregnancy>>
<</if>>
<<capture _args>>
	<<if $_pregnancy.fetus[_args[0]].type isnot "human">>
		종류: <<trCreature "all" $_pregnancy.fetus[_args[0]].type[0]>><<print _trResult>> |
	<</if>>
	성별:
	<<switch $_pregnancy.fetus[_args[0]].gender>>
		<<case "m">>남성
		<<case "f">>여성
		<<case "h">>후타나리
	<</switch>>
	<br>
	어머니:
	<<if $_pregnancy.fetus[_args[0]].motherKnown>>
		<<trNPCdesc $_pregnancy.fetus[_args[0]].mother>><<print _trResult>>
	<<else>>
		????
	<</if>>
	| 아버지:
	<<if $_pregnancy.fetus[_args[0]].fatherKnown>>
		<<trNPCdesc $_pregnancy.fetus[_args[0]].father>><<print _trResult>>
	<<else>>
		????
	<</if>>
	<br>
	크기: <<trBodysize $_pregnancy.fetus[_args[0]].features.size>><<print _trResult>> | 머리색: <<trColour $_pregnancy.fetus[_args[0]].features.hairColour>><<print _trResult>>
	<<if $_pregnancy.fetus[_args[0]].features.skinColour isnot null>>
		| 피부색: <<trColour $_pregnancy.fetus[_args[0]].features.skinColour>><<print _trResult>>
	<</if>>
	<br>
	<<if $_pregnancy.fetus[_args[0]].features.identical isnot null>>
		일란성 쌍둥이: <<print $_pregnancy.fetus[_args[0]].features.identical>>
		<br>
	<</if>>
	<label><<trNPCname $_pregnancy.fetus[_args[0]].name>><<print '<<textbox "$_pregnancy.fetus['+_args[0]+'].name" _trResult>>'>></label>
	<br>
	<span class="no-numberify"><<link "무작위 이름">>
		<<set _expectedChildId to "pc" + String($sexStats.vagina.pregnancy.givenBirth + 1 + _args[0]).padStart(3,"0").replace(' ','')>>
		<<set $sexStats.vagina.pregnancy.fetus[_args[0]].name to generateBabyName(undefined, $sexStats.vagina.pregnancy.fetus[_args[0]].gender, _expectedChildId)>>
		<<replace `"#child-" + _args[0]`>><<birthChildElement _args[0]>><</replace>>
	<</link>></span>
	<small class="right">
		세이브 ID: <<print $saveId>>
		<<if $saveName isnot "">>
			| 이름: <<print $saveName>>
		<</if>>
	</small>
<</capture>>
<</widget>>

<<widget "wakingEffects">><<silently>>
/*ToDo: Pregnancy, remove $pregnancyTesting to properly enable*/
<<if $pregnancyTesting is undefined>>
<<elseif _args[0] and $sexStats.vagina.menstruation.currentState is "pregnant" or ($sexStats.vagina.menstruation.currentState is "normal" and ($playerPregnancyHumanDisable is "f" or $playerPregnancyBeastDisable is "f"))>>
	<<if $player.vaginaExist>>
		<<set $_pregnancy to $sexStats.vagina.pregnancy>>
	<<else>>
		<<set $_pregnancy to $sexStats.anus.pregnancy>>
	<</if>>
	<<set _wakingEffect to wakingPregnancyEvent(random(0,100))>>
	<<if Array.isArray(_wakingEffect)>>
		<<set _wakingEffect to _wakingEffect[random(0,_wakingEffect.length - 1)]>>
	<</if>>
	<<switch _wakingEffect>>
		<<case "tired">>
			<<set $_text_output to "You wake up feeling more tired than rested.<<tiredness 10>><<gtiredness>>">>
		<<case "crying">>
			<<set $_text_output to "You wake up in tears. You aren't even sure why you're crying, but the emotion quickly passes.">>
		<<case "angry">>
			<<set $_text_output to "You wake up feeling angry. The mood takes you by surprise, but soon passes.">>
		<<case "meatCraving">>
			<<set $_text_output to `You awaken to a strange craving ${V.wolfgirl >= 2 ? "of digging your fangs into" : "for"} something meaty.`>>
		<<case "foodCraving">>
			<<set $_text_output to `You awaken to a strange craving for something ${["sweet","spicy","sour","savory","bitter"][random(0,4)]}.`>>
		<<case "headache">>
			<<set $_text_output to "You wake up to your head throbbing. You're not sure what brought on this headache, but it eventually passes.">>
		<<case "sensitiveBreasts">>
			<<set $_text_output to "You wake to your <<breasts>> feeling more tender than normal. Thankfully, it passes.">>
		<<case "bloated">>
			<<set $_text_output to "당신은 일어나며 배가 약간 더부룩한 느낌을 받는다.">>
		<<case "lightHeaded">>
			<<set $_text_output to "당신은 일어나며 잠시동안 약간 몽롱한 느낌을 받는다.">>
		<<case "dizzy">>
			<<set $_text_output to "당신은 일어나며 약간 어지러운 느낌을 받았으나 금방 괜찮아진다.">>
		<<case "mildNausea">>
			<<set $_text_output to "당신은 일어나며 약간 메스꺼운 느낌을 받았으나 금방 괜찮아진다.">>
		<<case "nausea">>
			<<set $_text_output to "당신은 일어나며 메스꺼운 느낌을 받았으나 시간이 지나자 괜찮아진다.">>
		<<case "dryheaving">>
			<<if $location is "wolf_cave">>
				<<set $_text_output to "당신은 메스꺼운 느낌을 받으며 일어나, 재빨리 침대에서 동굴 가장자리로 뛰쳐나간다. 당신은 그곳에다 어쩔 수 없이 헛구역질을 한다.<<stress 10>><<gstress>><<pain 1>><<gpain>>">>
			<<elseif $location is "farm">>
				<<set $_text_output to "당신은 메스꺼운 느낌을 받으며 일어나, 재빨리 침대에서 외양간 가장자리로 뛰쳐나간다. 당신은 그곳에다 어쩔 수 없이 헛구역질을 한다.<<stress 10>><<gstress>><<pain 1>><<gpain>>">>
			<<elseif $location is "tower">>
				<<set $_text_output to "당신은 메스꺼운 느낌을 받으며 일어나, 재빨리 침대에서 탑 가장자리로 뛰쳐나간다. 당신은 그 위에서 어쩔 수 없이 헛구역질을 한다.<<stress 10>><<gstress>><<pain 1>><<gpain>>">>
			<<else>>
				<<set $_text_output to "당신은 메스꺼운 느낌을 받으며 일어나, 재빨리 침대에서 근처 쓰레기통으로 뛰쳐나간다. 당신은 그 안에다 어쩔 수 없이 헛구역질을 한다.<<stress 10>><<gstress>><<pain 1>><<gpain>>">>
			<</if>>
			<<if $awareness gte 200 and $sciencetrait gte 4 and playerVaginalPregnancyCheck() gt 1>>
				<<set $_text_output += " 어쩌면 임신테스트를 받아보는 것이 좋을 것 같다.">>
			<</if>>
		<<case "lightBabyKick">>
			<<set $_text_output to "당신은 당신의 아기가 가볍게 발을 차는 것을 느끼며 일어난다.<<stress -10>><<lstress>>">>
		<<case "babyKick">>
			<<set $_text_output to "당신은 당신의 아기가 발을 차는 것을 느끼며 일어난다.<<stress -10>><<lstress>><<pain 1>><<gpain>>">>
		<<case "babyMovement">>
			<<set $_text_output to "당신은 당신의 아기가 몸을 뒤집는 것을 느끼며 일어난다.<<stress -10>><<lstress>>">>
		<<case "babyHiccup">>
			<<set $_text_output to "당신은 아기가 딸꾹질하는 것을 느끼며 일어난다.<<stress -10>><<lstress>>">>
		<<case "earlyContractions">>
			<<set $_text_output to "당신은 잠시동안 간헐적인 진통을 느끼며 일어난다.<<stress 5>><<gstress>><<pain 1>><<gpain>>">>
		<<case "bellySize">>
			<<set $_text_output to "당신은 일어나 당신의 커진 배를 쳐다본다.">>
			<<if $_pregnancy.potentialFathers.length is 1>>
				<<NPCdesc_ ga $_pregnancy.potentialFathers[0][1]>><<set $_text_output += " 아이 아빠는 "+ _trResult +" 확실하다.">>
			<<else>>
				<<set $_text_output += " 당신은 누가 당신을 임신시켰는지 궁금해한다.">>
			<</if>>
			<<set $_pregnancy.awareOf to true>>
		<<case "missedPeriod">>
			<<set $_text_output to "You wake and think about the last period you had, strangely, your current one is late.">>
			<<if $awareness gte 200 and $sciencetrait gte 4 and playerVaginalPregnancyCheck() gt 1>>
				<<set $_text_output += "You wonder if you got yourself pregnant again, maybe you should get tested.">>
			<</if>>
			<<set $sexStats.vagina.awareOfPeriodDelay to true>>
	<</switch>>
<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "pregnancyDailyEvent">><<silently>>
<<if !["Asylum Sleep","Cabin Sleep","Wolf Cave Sleep","Bird Tower Sleep","Livestock Sleep","Farm Abduction wake 4","Sleep","Avery Hotel Morning"].includes($passage)>>
	<<set _rng to random(0,100) + ($daily.pregnancyEvent || 0)>>
	<<set _event to dailyPregnancyEvent(_rng)>>
	<<if Array.isArray(_event)>>
		<<set _event to _event[random(0,_event.length - 1)]>>
	<</if>>
	<<switch _event>>
		<<case "tired">>
			<<set $_text_output to "You yawn, everything seems to take more effort than usual.<<tiredness 2>><<gtiredness>>">>
		<<case "crying">>
			<<set $_text_output to "You suddenly burst into tears. You aren't even sure why you're crying, but the sadness passes as quickly as it came.<<stress 5>><<gstress>>">>
		<<case "angry">>
			<<set $_text_output to "You feel angry out of nowhere. The change in mood takes you by surprise, but it soon passes.<<stress 5>><<gstress>>">>
		<<case "meatCraving">>
			<<set $_text_output to `You have a sudden, strange craving ${V.wolfgirl >= 2 ? "of digging your fangs into" : "for"} something meaty.`>>
		<<case "foodCraving">>
			<<set $_text_output to `You have a sudden, strange craving for something ${["sweet","spicy","sour","savory","bitter"][random(0,4)]}.`>>
		<<case "cramping">>
			<<set $_text_output to "당신은 당신의 질 근처에서 약간의 경련을 느낀다.<<stress 5>><<gstress>><<pain 5>><<gpain>>">>
		<<case "bloated">>
			<<set $_text_output to "당신은 배가 약간 더부룩한 느낌을 받는다.<<stress 3>><<gstress>>">>
		<<case "lightHeaded">>
			<<set $_text_output to "당신은 잠시동안 약간 몽롱한 느낌을 받는다.">>
		<<case "dizzy">>
			<<set $_text_output to "당신은 약간 어지러운 느낌을 받았으나 금방 괜찮아진다.">>
		<<case "mildNausea">>
			<<set $_text_output to "당신은 약간 메스꺼운 느낌을 받았으나 금방 괜찮아진다.">>
		<<case "nausea">>
			<<set $_text_output to "당신은 메스꺼운 느낌을 받았으나 시간이 지나자 괜찮아진다.">>
		<<case "lightBabyKick">>
			<<set $_text_output to "당신은 당신의 아기가 가볍게 발을 차는 것을 느낀다.<<stress -10>><<lstress>>">>
		<<case "babyKick">>
			<<set $_text_output to "당신은 당신의 아기가 발을 차는 것을 느낀다.<<stress -10>><<lstress>><<pain 1>><<gpain>>">>
		<<case "babyMovement">>
			<<set $_text_output to "당신은 당신의 아기가 몸을 뒤집는 것을 느낀다.<<stress -10>><<lstress>>">>
		<<case "babyHiccup">>
			<<set $_text_output to "당신은 아기가 딸꾹질하는 것을 느낀다.<<stress -10>><<lstress>>">>
		<<case "earlyContractions">>
			<<set $_text_output to "당신은 잠시동안 간헐적인 진통을 느낀다.<<stress 5>><<gstress>>">>
	<</switch>>
	<<if _event>>
		<<run delete $daily.pregnancyEvent>>
	<<else>>
		<<if !$daily.pregnancyEvent>>
			<<set $daily.pregnancyEvent to 0>>
		<</if>>
		<<set $daily.pregnancyEvent += 15>>
	<</if>>
<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><br><</if>>
<</widget>>

<<widget "pregnancyWatersBrokenPassout">>
<<if $player.vaginaExist>>
	<<set $_pregnancy to $sexStats.vagina.pregnancy>>
<<else>>
	<<set $_pregnancy to $sexStats.anus.pregnancy>>
<</if>>
<<set $_pregnancy.waterBreaking to false>>
/*ToDo: Pregnancy - fill out for specific pregnancy passout events*/
/*Area specific passout text for alternative pregnancy birth events*/
<<switch _args[0]>>
	<<case "asylum">>
	<<case "forest">>
		<<if $_pregnancy.type is "wolf">>
			/*wolves help you if the pc is pregnant with wolves?*/
		<<else>>

		<</if>>
	<<case "lake">>
	<<case "tentacleworld">>
		<<if $tentacleEntrance is "mirror">>

		<<else>>

		<</if>>
	<<case "farmroad">>
		<<if $location is "farm" and $_pregnancy.potentialFathers.find(father => father[1] === "Alex")>>
			/*Alex can help here*/
		<<else>>

		<</if>>
	<<case "remy">>
	<<case "remyAbduction">>
	<<case "moor">>
	<<case "alley">>
	<<case "arcade">>
	<<case "beach">>
	<<case "bus">>
	<<case "docksSneak">>
	<<case "docks">>
	<<case "home">>
	<<case "hospital">>
	<<case "trash">>
	<<case "sea">>
	<<case "shop">>
	<<case "monsterTower">>
	<<case "street">>
	<<case "compound">>
	<<case "temple">>
	<<case "cave">>
	<<case "prison">>
	<<case "edencabin">>
		<<if $_pregnancy.potentialFathers.find(father => father[1] === "Eden")>>
			/*Eden thinks it's his child?*/
		<<else>>

		<</if>>
	<<case "drain">>
	<<case "school">>
	<<case "schoolLibrarian">>
		/*Wake up while being put in an ambulance?*/
	<<case "adultShop">>
	<<default>>
		With your waters broken, you're too stressed to continue.
<</switch>>
<br><br>
/*Link for alternative pregnancy birth events*/
<<switch _args[0]>>
	<<case "forest">>
		<<if $_pregnancy.type is "wolf">>
			/*wolves help you if the pc is pregnant with wolves?*/
			<<link [[다음|Pregnancy Birth Hospital Wolf 3]]>><<set $stress -= 5000>><<endevent>><</link>>
		<<else>>
			<<link [[다음|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<</if>>
	<<case "edencabin">>
		<<if $_pregnancy.potentialFathers.find(father => father[1] === "Eden")>>
			/*Alternative place to give birth?*/
			<<link [[다음|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<<else>>
			<<link [[다음|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<</if>>
	<<case "remy" "remyAbduction">>
		/*Alternative place to give birth?*/
		<<link [[다음|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
	<<case "farmroad">>
		<<if $location is "farm" and $_pregnancy.potentialFathers.find(father => father[1] === "Alex")>>
			/*Alternative place to give birth?*/
			<<link [[다음|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<<else>>
			<<link [[다음|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
		<</if>>
	<<case "hospital">>
		<<link [[다음|Pregnancy Birth Hospital]]>><<set $stress -= 5000>><<endevent>><</link>>
	<<default>>
		<<link [[다음|Pregnancy Birth Hospital Passout]]>><<set $stress -= 5000>><<endevent>><</link>>
<</switch>>
<</widget>>

<<widget "pregnancyMorningAfterPill">>
<<if $sexStats.vagina.menstruation.currentState is "pregnant">>
	<<if $player.vaginaExist>>
		<<set $_pregnancy to $sexStats.vagina.pregnancy>>
	<<else>>
		<<set $_pregnancy to $sexStats.anus.pregnancy>>
	<</if>>
	<<if between($_pregnancy.timer, 0, 2)>>
		<<set $_menstruation to $sexStats.vagina.menstruation>>
		<<set $_pregnancy.fetus to []>>
		<<set $_pregnancy.waterBreaking to false>>
		<<set $_pregnancy.type to null>>
		<<set $_pregnancy.timer to null>>
		<<set $_pregnancy.timerEnd to null>>
		<<set $_pregnancy.awareOf to null>>
		<<set $_pregnancy.potentialFathers to []>>
		<<set $_menstruation.currentState to "normal">>
	<</if>>
<</if>>
<<restartMenstruationCycle>>
<</widget>>

<<widget "pregnancyGendersText">><<silently>>
	<<set _pregnancy to $sexStats.vagina.pregnancy>>
	<<set _pregnancy.genderKnown to true>>
	<<set $_genders to {m:0,f:0,h:0}>>
	<<run _pregnancy.fetus.forEach(b => $_genders[b.gender]++)>>
	<<if _pregnancy.fetus[0].features.identical is true>>
		<<set $_text_output to "의사 하퍼는 그들이 일란성 <<if _pregnancy.fetus.length is 3>>세쌍둥이<<else>>쌍둥이<</if>>라서 전부 같은 성별이며 얼굴형이 비슷하다고 생각한다.">>
	<<elseif ($_genders.m is _pregnancy.fetus.length or $_genders.f is _pregnancy.fetus.length or $_genders.h is _pregnancy.fetus.length) and _pregnancy.fetus.length gt 1>>
		<<set $_text_output to "그들이 모두 같은 성별임에도 불구하고, 의사 하퍼는 그들이 약간 다른 얼굴형을 하고 있어 일란성 쌍둥이가 아니라고 생각한다.">>
	<<else>>
		<<set $_text_output to "당신은">>
		<<if $_genders.m gt 0>>
			<<switch $_genders.m>>
				<<case 1>><<set $_text_output += " 1명의">>
				<<default>><<set $_text_output += " " + $_genders.m + "명의">>
			<</switch>>
			<<set $_text_output += " 남자아기">><<if $_genders.m gt 1>><<set $_text_output += "">><</if>>
			<<if $_genders.f gt 0 and $_genders.h gt 0>>
				<<set $_text_output += ",">>
			<<elseif $_genders.f gt 0 or $_genders.h gt 0>>
				<<set $_text_output += "와">>
			<</if>>
		<</if>>
		<<if $_genders.f gt 0>>
			<<switch $_genders.f>>
				<<case 1>><<set $_text_output += " 1명의">>
				<<default>><<set $_text_output += " " + $_genders.f + "명의">>
			<</switch>>
			<<set $_text_output += " 여자아기">>
			<<if $_genders.f gt 1>><<set $_text_output += "">><</if>>
			<<if $_genders.h gt 0>><<set $_text_output += "와">><</if>>
		<</if>>
		<<if $_genders.h gt 0>>
			<<switch $_genders.h>>
				<<case 1>><<set $_text_output += " 1명의">>
				<<default>><<set $_text_output += " " + $_genders.h + "명의">>
			<</switch>>
			<<set $_text_output += " 후타나리 아기">>
			<<if $_genders.h gt 1>><<set $_text_output += "">><</if>>
		<</if>>
		<<set $_text_output += "를 낳았다.">>
	<</if>>
<</silently>><<if $_text_output>><<print $_text_output>><</if>>
<</widget>>

<<widget "npcPregnancyUpdater">>
<<for $_i to 0; $_i lt $NPCNameList.length; $_i++>>
	<<set $_name to $NPCNameList[$_i]>>
	<<if $NPCName[$NPCNameList.indexOf($_name)].pregnancy is undefined>>
		<<set $NPCName[$NPCNameList.indexOf($_name)].pregnancy to {}>>
	<</if>>
	<<set $_pregnancy to $NPCName[$NPCNameList.indexOf($_name)].pregnancy>>
	<<if setup.npcPregnancy.canBePregnant.includes($_name) and $NPCName[$NPCNameList.indexOf($_name)].pregnancy.enabled is undefined>>
		<<set $_pregnancy.fetus to []>>
		<<set $_pregnancy.givenBirth to 0>>
		<<set $_pregnancy.totalBirthEvents to 0>>
		<<set $_pregnancy.timer to null>>
		<<set $_pregnancy.timerEnd to null>>
		<<set $_pregnancy.waterBreaking to null>>
		<<set $_pregnancy.npcAwareOf to null>>
		<<set $_pregnancy.pcAwareOf to null>>
		<<set $_pregnancy.type to null>>
		<<set $_pregnancy.enabled to true>>
		<<set $_pregnancy.cycleDaysTotal to random(24,32)>>
		<<set $_pregnancy.cycleDay to random(1,$_pregnancy.cycleDaysTotal)>>
		<<set $_pregnancy.cycleDangerousDay to 5>>
		<<set $_pregnancy.sperm to {}>>
		<<set $_pregnancy.potentialFathers to []>>
		<<switch $_name>>
			<<case "Kylar">><<set $_pregnancy.pills to "fertility">>
			<<case "Alex" "Wren">><<set $_pregnancy.pills to "contraceptive">>
			<<default>><<set $_pregnancy.pills to null>>
		<</switch>>
	<<else>>
		/*For saves that have the variables set, but have no need to be there*/
		<<set $NPCName[$NPCNameList.indexOf($_name)].pregnancy to {}>>
	<</if>>
	<<if !$_pregnancy.pregnancyAvoidance>>
		<<switch $_name>>
			<<case "Kylar" "Black Wolf" "Great Hawk">><<set $NPCName[$NPCNameList.indexOf($_name)].pregnancyAvoidance to 0>>
			<<case "Robin" "Whitney" "Alex" "Wren">><<set $NPCName[$NPCNameList.indexOf($_name)].pregnancyAvoidance to 50>>
			<<default>><<set$NPCName[$NPCNameList.indexOf($_name)].pregnancyAvoidance to 100>>
		<</switch>>
	<</if>>
<</for>>
<</widget>>
